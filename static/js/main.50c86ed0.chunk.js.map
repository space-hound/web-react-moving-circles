{"version":3,"sources":["components/Controls/Controls.module.css","components/Board/Board.module.css","components/Circle/Circle.module.css","components/Slider/Slider.module.css","components/Numeric/Numeric.module.css","components/Checkbox/Checkbox.module.css","utils/options.js","utils/random.js","utils/actions.js","components/Circle/Circle.jsx","components/Slider/Slider.jsx","components/Numeric/Numeric.jsx","components/Checkbox/Checkbox.jsx","components/PausePlayButton/PausePlayButton.jsx","components/Controls/Controls.jsx","components/Board/Board.jsx","index.js"],"names":["module","exports","SIZE","SPEED","getRndInt","min","max","Math","floor","random","getRndBinary","getRndColor","parts","Array","map","length","join","createCircle","xBound","yBound","color","ogSize","size","dSize","ogSpeed","speed","xP","yP","xD","yD","createCircles","circlesCount","move","circle","moveCircles","circles","forEach","toggleBlock","isBlocked","toggleBlockCircles","modDir","modColor","modSpeed","value","modSize","modCircles","action","Circle","props","style","top","left","width","height","backgroundColor","transform","className","styles","Slider","label","type","onInput","event","target","Numeric","onChange","Checkbox","checked","PausePlayButton","isPlaying","id","Controls","onSubmit","preventDefault","onAction","nativeEvent","submitter","onCirclesCountChange","SpacedAfter","isRendered","speedModifier","onCircleSpeedChange","sizeModifier","onCircleSizeChange","isBrownian","onBrownianChange","Board","state","interval","brownianInterval","$board","React","createRef","handleAction","bind","handleModSize","handleModSpeed","handleBrownianChange","handleBoardSizeChange","handleCircleCountChange","boundsobserver","ResizeObserver","this","InnerBoard","ref","index","setBounds","observe","current","computedStyles","window","getComputedStyle","setState","parseInt","setInterval","ACTIONS","handleModDir","handleRender","handlePlay","handlePause","handleClear","handleModColor","handleBrownian","clearInterval","undefined","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50c86ed0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__2pRFN\",\"SpacedAfter\":\"Controls_SpacedAfter__3DB3T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2AXbc\",\"InnerBoard\":\"Board_InnerBoard__2ait6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Circle\":\"Circle_Circle__1mNn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Slider\":\"Slider_Slider__GKt4b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Numeric\":\"Numeric_Numeric__tbwPy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkbox\":\"Checkbox_Checkbox__1BNj8\"};","export const SIZE = {\r\n    min: 15,\r\n    max: 35\r\n};\r\n\r\nexport const SPEED = {\r\n    min: 5,\r\n    max: 15\r\n}\r\n\r\nexport const FRAMES = 1000 / 60;\r\n\r\nexport const BROWNIAN = 250;","export const getRndInt = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport const getRndBinary = () => {\r\n    return getRndInt(1, 100) <= 50 ? 1 : -1;\r\n}\r\n\r\nexport const getRndColor = () => {\r\n    const parts = \"0123456789ABCDEF\";\r\n    return [...new Array(6)].map(() => {\r\n        return parts[\r\n            getRndInt(0, parts.length - 1)\r\n        ];\r\n    }).join(\"\");\r\n}","import { getRndInt, getRndBinary, getRndColor } from './random';\r\nimport { SIZE, SPEED } from './options'\r\n\r\nexport default {\r\n\r\n    createCircle(xBound, yBound) {\r\n        const color = getRndColor();\r\n        const ogSize = getRndInt(SIZE.min, SIZE.max);\r\n        const size = ogSize;\r\n        const dSize = Math.floor(size / 2); \r\n        const ogSpeed = getRndInt(SPEED.min, SPEED.max);\r\n        const speed = ogSpeed;\r\n        const xP = getRndInt(\r\n            0 + size,\r\n            xBound - size\r\n        );\r\n        const yP = getRndInt(\r\n            0 + size,\r\n            yBound - size\r\n        );\r\n        const xD = getRndBinary();\r\n        const yD = getRndBinary();\r\n        return { color, ogSize, size, dSize, ogSpeed, speed, xP, yP, xD, yD };\r\n    },\r\n\r\n    createCircles({ circlesCount, xBound, yBound }) {\r\n        return [...new Array(circlesCount)].map(() => {\r\n            return this.createCircle(xBound, yBound);\r\n        });\r\n    },\r\n\r\n    move(circle, xBound, yBound) {\r\n        circle.xP += circle.xD * circle.speed;\r\n        circle.yP += circle.yD * circle.speed;\r\n        if (circle.xP <= 0 + circle.dSize) {\r\n            circle.xP = 0 + circle.dSize;\r\n            circle.xD *= -1;\r\n        }\r\n        if (circle.xP >= xBound - circle.dSize) {\r\n            circle.xP = xBound - circle.dSize;\r\n            circle.xD *= -1;\r\n        }\r\n        if (circle.yP <= 0 + circle.dSize) {\r\n            circle.yP = 0 + circle.dSize;\r\n            circle.yD *= -1;\r\n        }\r\n        if (circle.yP >= yBound - circle.dSize) {\r\n            circle.yP = yBound - circle.dSize;\r\n            circle.yD *= -1;\r\n        }\r\n    },\r\n\r\n    moveCircles({ circles, xBound, yBound }) {\r\n        circles.forEach((circle) => {\r\n            this.move(circle, xBound, yBound);\r\n        });\r\n    },\r\n\r\n    toggleBlock(circle) {\r\n        circle.isBlocked = !circle.isBlocked;\r\n    },\r\n\r\n    toggleBlockCircles({ circles }) {\r\n        circles.forEach((circle) => {\r\n            this.toggleBlock(circle);\r\n        });\r\n    },\r\n\r\n    modDir(circle) {\r\n        if(getRndBinary() === 1) {\r\n            circle.xD *= -1;\r\n        } else {\r\n            circle.yD *= -1;\r\n        }\r\n    },\r\n\r\n    modColor(circle) {\r\n        circle.color = getRndColor();\r\n    },\r\n\r\n    modSpeed(circle, value) {\r\n        circle.speed = circle.ogSpeed + (circle.ogSpeed * (value / 100));\r\n    },\r\n\r\n    modSize(circle, value) {\r\n        const size = circle.ogSize + (circle.ogSize * (value / 100));\r\n        circle.size = size;\r\n        circle.dSize = Math.floor(size / 2);\r\n    },\r\n\r\n    modCircles(action, value, { circles }) {\r\n        circles.forEach((circle) => {\r\n            this[action](circle, value);\r\n        });\r\n    }\r\n}","import styles from './Circle.module.css';\r\n\r\nconst Circle = (props) => {\r\n    const style = {\r\n        top: props.xP,\r\n        left: props.yP,\r\n        width: props.size,\r\n        height: props.size,\r\n        backgroundColor: `#${props.color}`,\r\n        transform: `translate(-${props.dSize}px, -${props.dSize}px)`\r\n    };\r\n    return (\r\n        <div\r\n            className={styles.Circle}\r\n            style={style}\r\n        />\r\n    );\r\n}\r\nexport default Circle;","import styles from './Slider.module.css';\r\n\r\nconst Slider = (props) => {\r\n\r\n    const handleInput = (event) => {\r\n        if (props.onInput) {\r\n            props.onInput({\r\n                event,\r\n                value: event.target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${styles.Slider} ${props.className}`}>\r\n            {\r\n                props.label || <label>{props.label}</label>\r\n            }\r\n            <input\r\n                type=\"range\"\r\n                min={props.min}\r\n                max={props.max}\r\n                value={props.value}\r\n                onInput={handleInput}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Slider;","import styles from './Numeric.module.css'\r\n\r\nconst Numeric = (props) => {\r\n\r\n    const handleChange = (event) => {\r\n        if (props.onChange) {\r\n            props.onChange({\r\n                event,\r\n                value: event.target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${styles.Numeric} ${props.className}`}>\r\n            {\r\n                props.label || <label>{props.label}</label>\r\n            }\r\n            <input\r\n                value={props.value}\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Numeric;","import styles from './Checkbox.module.css';\r\n\r\nconst Checkbox = (props) => {\r\n    \r\n    const handleChange = (event) => {\r\n        if(props.onChange) {\r\n            props.onChange(event);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${styles.Checkbox} ${props.className}`}>\r\n            {\r\n                props.label && <label>{props.label}</label>\r\n            }\r\n            <input type=\"checkbox\" checked={props.checked} onChange={handleChange} /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox;","const PausePlayButton = (props) => {\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {\r\n                props.isPlaying && <button id=\"pause\">Pause</button>\r\n            }\r\n            {\r\n                !props.isPlaying && <button id=\"play\">Play</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PausePlayButton;","import styles from './Controls.module.css'\r\n\r\nimport Slider from '../Slider/Slider';\r\nimport Numeric from '../Numeric/Numeric';\r\nimport Checkbox from '../Checkbox/Checkbox';\r\nimport PausePlayButton from '../PausePlayButton/PausePlayButton';\r\n\r\nconst Controls = (props) => {\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (props.onAction) {\r\n            props.onAction({\r\n                event,\r\n                type: event.nativeEvent.submitter.id\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form\r\n            className={styles.Controls}\r\n            onSubmit={handleSubmit} >\r\n\r\n            <Numeric\r\n                label=\"Circles:\"\r\n                value={props.circlesCount}\r\n                onChange={props.onCirclesCountChange}\r\n                className={styles.SpacedAfter}\r\n            />\r\n            \r\n            <button\r\n                id=\"render\"\r\n                className={styles.SpacedAfter}\r\n            >\r\n                Render\r\n            </button>\r\n            \r\n            {\r\n                props.isRendered && (\r\n                    <button\r\n                        id=\"clear\"\r\n                        className={styles.SpacedAfter}\r\n                    >\r\n                        Clear\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && (\r\n                    <PausePlayButton\r\n                        isPlaying={props.isPlaying}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <button\r\n                        id=\"recolor\"\r\n                        className={styles.SpacedAfter}\r\n                    >\r\n                        Recolor\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <button\r\n                        id=\"redirect\"\r\n                        className={styles.SpacedAfter}\r\n                    >\r\n                        Redirect\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <Slider\r\n                        label=\"Speed:\"\r\n                        min=\"-100\"\r\n                        max=\"100\"\r\n                        value={props.speedModifier}\r\n                        onInput={props.onCircleSpeedChange}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <Slider\r\n                        label=\"Size:\"\r\n                        min=\"-90\"\r\n                        max=\"90\"\r\n                        value={props.sizeModifier}\r\n                        onInput={props.onCircleSizeChange}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <Checkbox\r\n                        className=\"spaced\"\r\n                        label=\"Brownian:\"\r\n                        checked={props.isBrownian}\r\n                        onChange={props.onBrownianChange}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Controls;","import React, { Component } from 'react';\r\n\r\nimport styles from './Board.module.css';\r\n\r\nimport { FRAMES, BROWNIAN } from '../../utils/options';\r\nimport ACTIONS from '../../utils/actions';\r\n\r\nimport Circle from '../Circle/Circle';\r\nimport Controls from '../Controls/Controls';\r\n\r\nexport default class Board extends Component {\r\n\r\n    state = {\r\n        isRendered: false,\r\n        isPlaying: false,\r\n        isBrownian: false,\r\n        speedModifier: 0,\r\n        sizeModifier: 0,\r\n        circlesCount: 75,\r\n        circles: [],\r\n        xBound: 0,\r\n        yBound: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.interval = null;\r\n        this.brownianInterval = null;\r\n\r\n        this.$board = React.createRef();\r\n\r\n        this.handleAction = this.handleAction.bind(this);\r\n        this.handleModSize = this.handleModSize.bind(this);\r\n        this.handleModSpeed = this.handleModSpeed.bind(this);\r\n        this.handleBrownianChange = this.handleBrownianChange.bind(this);\r\n        this.handleBoardSizeChange = this.handleBoardSizeChange.bind(this);\r\n        this.handleCircleCountChange = this.handleCircleCountChange.bind(this);\r\n\r\n        this.boundsobserver = new ResizeObserver(this.handleBoardSizeChange);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Board}>\r\n                <Controls\r\n                    {...this.state}\r\n                    onAction={this.handleAction}\r\n                    onCircleSizeChange={this.handleModSize}\r\n                    onCircleSpeedChange={this.handleModSpeed}\r\n                    onBrownianChange={this.handleBrownianChange}\r\n                    onCirclesCountChange={this.handleCircleCountChange}\r\n                />\r\n                <div className={styles.InnerBoard} ref={this.$board}>\r\n                    {\r\n                        this.state.circles.map((circle, index) => (\r\n                            <Circle\r\n                                key={index}\r\n                                {...circle}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setBounds();\r\n        this.boundsobserver.observe(this.$board.current);\r\n    }\r\n\r\n    setBounds() {\r\n        const computedStyles = window.getComputedStyle(this.$board.current);\r\n        this.setState({\r\n            xBound: parseInt(computedStyles.height),\r\n            yBound: parseInt(computedStyles.width)\r\n        });\r\n    }\r\n\r\n    setInterval() {\r\n        this.interval = setInterval(() => {\r\n            if(this.state.isPlaying) {\r\n                ACTIONS.moveCircles(this.state);\r\n                this.setState({ circles: this.state.circles });\r\n            }\r\n        }, FRAMES);\r\n        this.brownianInterval = setInterval(() => {\r\n            if (this.state.isPlaying && this.state.isBrownian) {\r\n                this.handleModDir();\r\n            }\r\n        }, BROWNIAN);\r\n    }\r\n\r\n    handleBoardSizeChange () {\r\n        this.setBounds();\r\n    }\r\n\r\n    handleAction({event, type}) {\r\n        switch (type) {\r\n            case \"render\": this.handleRender();\r\n                break;\r\n            case \"play\": this.handlePlay();\r\n                break;\r\n            case \"pause\": this.handlePause();\r\n                break;\r\n            case \"clear\": this.handleClear();\r\n                break;\r\n            case \"recolor\": this.handleModColor();\r\n                break;\r\n            case \"redirect\": this.handleModDir();\r\n                break;\r\n            case \"brownian\": this.handleBrownian();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handlePlay() {\r\n        this.setState({ isPlaying: true });\r\n    }\r\n\r\n    handlePause() {\r\n        this.setState({ isPlaying: false });\r\n    }\r\n\r\n    handleClear() {\r\n        clearInterval(this.interval);\r\n        clearInterval(this.brownianInterval);\r\n        this.setState({\r\n            isRendered: false,\r\n            isPlaying: false,\r\n            isBrownian: false,\r\n            speedModifier: 0,\r\n            sizeModifier: 0,\r\n            circles: []\r\n        });\r\n    }\r\n\r\n    handleRender() {\r\n        this.handleClear();\r\n        this.setState({\r\n            isPlaying: true,\r\n            isRendered: true,\r\n            circles: ACTIONS.createCircles(this.state)\r\n        }, this.setInterval.bind(this));\r\n    }\r\n\r\n    handleBrownianChange (event) {\r\n        this.setState({ isBrownian: !this.state.isBrownian });\r\n    }\r\n\r\n    handleModDir(event) {\r\n        ACTIONS.modCircles(\"modDir\", undefined, this.state);\r\n        this.setState({ circles: this.state.circles });\r\n    }\r\n\r\n    handleModSize({event, value}) {\r\n        ACTIONS.modCircles(\"modSize\", parseInt(value), this.state);\r\n        this.setState({\r\n            sizeModifier: value,\r\n            circles: this.state.circles\r\n        });\r\n    }\r\n\r\n    handleModSpeed({event, value}) {\r\n        ACTIONS.modCircles(\"modSpeed\", parseInt(value), this.state);\r\n        this.setState({\r\n            speedModifier: value,\r\n            circles: this.state.circles\r\n        });\r\n    }\r\n\r\n    handleModColor() {\r\n        ACTIONS.modCircles(\"modColor\", undefined, this.state);\r\n        this.setState({ circles: this.state.circles });\r\n    }\r\n\r\n    handleCircleCountChange({event, value}) {\r\n        this.setState({ circlesCount: parseInt(value) || \"\" });\r\n    }\r\n}\r\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './components/Board/Board';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Board />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}