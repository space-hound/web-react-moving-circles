[{"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\index.js":"1","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\utils\\options.js":"2","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\utils\\actions.js":"3","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\utils\\random.js":"4","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Board\\Board.jsx":"5","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Controls\\Controls.jsx":"6","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Circle\\Circle.jsx":"7","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Numeric\\Numeric.jsx":"8","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Slider\\Slider.jsx":"9","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\PausePlayButton\\PausePlayButton.jsx":"10","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Checkbox\\Checkbox.jsx":"11"},{"size":242,"mtime":1607004934258,"results":"12","hashOfConfig":"13"},{"size":175,"mtime":1607001334555,"results":"14","hashOfConfig":"13"},{"size":2706,"mtime":1607000477160,"results":"15","hashOfConfig":"13"},{"size":413,"mtime":1606997881598,"results":"16","hashOfConfig":"13"},{"size":5431,"mtime":1607003624808,"results":"17","hashOfConfig":"13"},{"size":3578,"mtime":1607004352743,"results":"18","hashOfConfig":"13"},{"size":463,"mtime":1607003416422,"results":"19","hashOfConfig":"13"},{"size":618,"mtime":1607004444755,"results":"20","hashOfConfig":"13"},{"size":705,"mtime":1607004408322,"results":"21","hashOfConfig":"13"},{"size":355,"mtime":1607004388553,"results":"22","hashOfConfig":"13"},{"size":521,"mtime":1607004475520,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ib9qic",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\index.js",[],["50","51"],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\utils\\options.js",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\utils\\actions.js",["52"],"import { getRndInt, getRndBinary, getRndColor } from './random';\r\nimport { SIZE, SPEED } from './options'\r\n\r\nexport default {\r\n\r\n    createCircle(xBound, yBound) {\r\n        const color = getRndColor();\r\n        const ogSize = getRndInt(SIZE.min, SIZE.max);\r\n        const size = ogSize;\r\n        const dSize = Math.floor(size / 2); \r\n        const ogSpeed = getRndInt(SPEED.min, SPEED.max);\r\n        const speed = ogSpeed;\r\n        const xP = getRndInt(\r\n            0 + size,\r\n            xBound - size\r\n        );\r\n        const yP = getRndInt(\r\n            0 + size,\r\n            yBound - size\r\n        );\r\n        const xD = getRndBinary();\r\n        const yD = getRndBinary();\r\n        return { color, ogSize, size, dSize, ogSpeed, speed, xP, yP, xD, yD };\r\n    },\r\n\r\n    createCircles({ circlesCount, xBound, yBound }) {\r\n        return [...new Array(circlesCount)].map(() => {\r\n            return this.createCircle(xBound, yBound);\r\n        });\r\n    },\r\n\r\n    move(circle, xBound, yBound) {\r\n        circle.xP += circle.xD * circle.speed;\r\n        circle.yP += circle.yD * circle.speed;\r\n        if (circle.xP <= 0 + circle.dSize) {\r\n            circle.xP = 0 + circle.dSize;\r\n            circle.xD *= -1;\r\n        }\r\n        if (circle.xP >= xBound - circle.dSize) {\r\n            circle.xP = xBound - circle.dSize;\r\n            circle.xD *= -1;\r\n        }\r\n        if (circle.yP <= 0 + circle.dSize) {\r\n            circle.yP = 0 + circle.dSize;\r\n            circle.yD *= -1;\r\n        }\r\n        if (circle.yP >= yBound - circle.dSize) {\r\n            circle.yP = yBound - circle.dSize;\r\n            circle.yD *= -1;\r\n        }\r\n    },\r\n\r\n    moveCircles({ circles, xBound, yBound }) {\r\n        circles.forEach((circle) => {\r\n            this.move(circle, xBound, yBound);\r\n        });\r\n    },\r\n\r\n    toggleBlock(circle) {\r\n        circle.isBlocked = !circle.isBlocked;\r\n    },\r\n\r\n    toggleBlockCircles({ circles }) {\r\n        circles.forEach((circle) => {\r\n            this.toggleBlock(circle);\r\n        });\r\n    },\r\n\r\n    modDir(circle) {\r\n        if(getRndBinary() === 1) {\r\n            circle.xD *= -1;\r\n        } else {\r\n            circle.yD *= -1;\r\n        }\r\n    },\r\n\r\n    modColor(circle) {\r\n        circle.color = getRndColor();\r\n    },\r\n\r\n    modSpeed(circle, value) {\r\n        circle.speed = circle.ogSpeed + (circle.ogSpeed * (value / 100));\r\n    },\r\n\r\n    modSize(circle, value) {\r\n        const size = circle.ogSize + (circle.ogSize * (value / 100));\r\n        circle.size = size;\r\n        circle.dSize = Math.floor(size / 2);\r\n    },\r\n\r\n    modCircles(action, value, { circles }) {\r\n        circles.forEach((circle) => {\r\n            this[action](circle, value);\r\n        });\r\n    }\r\n}","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\utils\\random.js",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Board\\Board.jsx",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Controls\\Controls.jsx",["53"],"import styles from './Controls.module.css'\r\n\r\nimport Slider from '../Slider/Slider';\r\nimport Numeric from '../Numeric/Numeric';\r\nimport Checkbox from '../Checkbox/Checkbox';\r\nimport PausePlayButton from '../PausePlayButton/PausePlayButton';\r\n\r\nconst Controls = (props) => {\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (props.onAction) {\r\n            props.onAction({\r\n                event,\r\n                type: event.nativeEvent.submitter.id\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form\r\n            className={styles.Controls}\r\n            onSubmit={handleSubmit} >\r\n\r\n            <Numeric\r\n                label=\"Circles:\"\r\n                value={props.circlesCount}\r\n                onChange={props.onCirclesCountChange}\r\n                className={styles.SpacedAfter}\r\n            />\r\n            \r\n            <button\r\n                id=\"render\"\r\n                className={styles.SpacedAfter}\r\n            >\r\n                Render\r\n            </button>\r\n            \r\n            {\r\n                props.isRendered && (\r\n                    <button\r\n                        id=\"clear\"\r\n                        className={styles.SpacedAfter}\r\n                    >\r\n                        Clear\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && (\r\n                    <PausePlayButton\r\n                        isPlaying={props.isPlaying}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <button\r\n                        id=\"recolor\"\r\n                        className={styles.SpacedAfter}\r\n                    >\r\n                        Recolor\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <button\r\n                        id=\"redirect\"\r\n                        className={styles.SpacedAfter}\r\n                    >\r\n                        Redirect\r\n                    </button>\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <Slider\r\n                        label=\"Speed:\"\r\n                        min=\"-100\"\r\n                        max=\"100\"\r\n                        value={props.speedModifier}\r\n                        onInput={props.onCircleSpeedChange}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <Slider\r\n                        label=\"Size:\"\r\n                        min=\"-90\"\r\n                        max=\"90\"\r\n                        value={props.sizeModifier}\r\n                        onInput={props.onCircleSizeChange}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                props.isRendered && props.isPlaying && (\r\n                    <Checkbox\r\n                        className=\"spaced\"\r\n                        label=\"Brownian:\"\r\n                        checked={props.isBrownian}\r\n                        onChange={props.onBrownianChange}\r\n                        className={styles.SpacedAfter}\r\n                    />\r\n                )\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Controls;","C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Circle\\Circle.jsx",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Numeric\\Numeric.jsx",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Slider\\Slider.jsx",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\PausePlayButton\\PausePlayButton.jsx",[],"C:\\Users\\Space Hound\\Desktop\\Projects\\web-react-moving-circles\\src\\components\\Checkbox\\Checkbox.jsx",[],["54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":1,"nodeType":"62","endLine":96,"endColumn":2},{"ruleId":"63","severity":1,"message":"64","line":108,"column":25,"nodeType":"65","endLine":108,"endColumn":55},{"ruleId":"56","replacedBy":"66"},{"ruleId":"58","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["68"],["69"],"no-global-assign","no-unsafe-negation"]